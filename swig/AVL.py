# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AVL
else:
    import _AVL

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dia = property(_AVL.DATA_dia_get, _AVL.DATA_dia_set)
    mes = property(_AVL.DATA_mes_get, _AVL.DATA_mes_set)
    ano = property(_AVL.DATA_ano_get, _AVL.DATA_ano_set)

    def __init__(self):
        _AVL.DATA_swiginit(self, _AVL.new_DATA())
    __swig_destroy__ = _AVL.delete_DATA

# Register DATA in _AVL:
_AVL.DATA_swigregister(DATA)

class USER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nome = property(_AVL.USER_nome_get, _AVL.USER_nome_set)
    cpf = property(_AVL.USER_cpf_get, _AVL.USER_cpf_set)
    email = property(_AVL.USER_email_get, _AVL.USER_email_set)
    ocupacao = property(_AVL.USER_ocupacao_get, _AVL.USER_ocupacao_set)
    niver = property(_AVL.USER_niver_get, _AVL.USER_niver_set)
    esquerda = property(_AVL.USER_esquerda_get, _AVL.USER_esquerda_set)
    direita = property(_AVL.USER_direita_get, _AVL.USER_direita_set)
    altura = property(_AVL.USER_altura_get, _AVL.USER_altura_set)

    def __init__(self):
        _AVL.USER_swiginit(self, _AVL.new_USER())
    __swig_destroy__ = _AVL.delete_USER

# Register USER in _AVL:
_AVL.USER_swigregister(USER)


def recriarNo(No):
    return _AVL.recriarNo(No)

def novoNo(nome, ocupacao, cpf, email, dia, mes, ano):
    return _AVL.novoNo(nome, ocupacao, cpf, email, dia, mes, ano)

def inserirNo(raiz, novoUser):
    return _AVL.inserirNo(raiz, novoUser)

def buscarNo(raiz, nome):
    return _AVL.buscarNo(raiz, nome)

def deletarNo(raiz, nome):
    return _AVL.deletarNo(raiz, nome)

def alturaNo(No):
    return _AVL.alturaNo(No)

def fatorNo(No):
    return _AVL.fatorNo(No)

def rotDireita(y):
    return _AVL.rotDireita(y)

def rotEsquerda(x):
    return _AVL.rotEsquerda(x)

def escreveNo(No):
    return _AVL.escreveNo(No)

def serializar(No):
    return _AVL.serializar(No)

def desserializar(arvore):
    return _AVL.desserializar(arvore)

def exibirPre(arvore):
    return _AVL.exibirPre(arvore)

def exibirIn(arvore):
    return _AVL.exibirIn(arvore)

def exibirPos(arvore):
    return _AVL.exibirPos(arvore)


